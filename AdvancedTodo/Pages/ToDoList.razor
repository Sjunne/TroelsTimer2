@page "/ToDoList"
@using AdvancedTodo.Data
@using AdvancedTodo.Models
@inject ITodosService TodosService

<h1>Todo list</h1>
<p>
    Filter by User Id: <input type="number" @bind-value="filterById" style="width:50px"/>
</p>
<p>
    Filter by completed status:
    <select class="form-control selectpicker" @onchange="@((arg) => FilterByCompletedStatus(arg))" style="width:100px">
        <option>Both</option>
        <option>False</option>
        <option>True</option>
    </select>
</p>
<p>
    Filter:
        <button class="btn btn-outline-dark" @onclick="loadFilter">Filter</button>
</p>


@if (todosToShow == null) {
    <p>
        <em>Loading...</em>
    </p>
} else if (!todosToShow.Any()) {
    <p>
        <em>No ToDo items exist. Please add some.</em>
    </p>
} else {
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th>
            <th>Todo ID</th>
            <th>Title</th>
            <th>Completed?</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in todosToShow) {
            <tr>
                <td>@item.UserId</td>
                <td>@item.TodoId</td>
                <td>@item.Title</td>
                <td>
                    <input type="checkbox" checked=@item.IsCompleted @onchange="@((arg) => CompletedChange(arg,item))"/>
                </td>

                <td>@item.IsCompleted</td>
                <td>
                    <button @onclick="@(() => RemoveTodo(item.TodoId))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
            </tr>
           

        }
        </tbody>
    </table>
    
}





@code {
    private IList<Todo> todosToShow;
    private IList<Todo> allTodos;
    
    private int? filterById;
    private bool? filterByIsCompleted;
/*
    private void FilterByUserId(ChangeEventArgs changeEventArgs) {
        filterById = null;
        try {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        } catch (Exception e) { }
        ExecuteFilter();
    }

   

    private void ExecuteFilter() {
        todosToShow = allTodos.Where(t => 
            (filterById != null && t.UserId == filterById || filterById == null) &&
            (filterByIsCompleted != null && t.IsCompleted == filterByIsCompleted || filterByIsCompleted == null)
            ).ToList();
    }
    
    */

    private void FilterByCompletedStatus(ChangeEventArgs args) {
        filterByIsCompleted = null;
        try {
            filterByIsCompleted = bool.Parse(args.Value.ToString());
        } catch (Exception e) { }
    }



    protected override async Task OnInitializedAsync() {
        //allTodos = await TodosService.GetTodosAsync();
        todosToShow = allTodos;
    }

    private async Task RemoveTodo(int todoId) {
        Todo todoToRemove = todosToShow.First(t => t.TodoId == todoId);
        TodosService.RemoveTodoAsync(todoId);
        allTodos.Remove(todoToRemove);
    }
    
    private async Task CompletedChange(ChangeEventArgs evt, Todo todo) {
        todo.IsCompleted=(bool)evt.Value;
        TodosService.UpdateAsync(todo);
    }

    public async Task loadFilter()
    {
        string query = "";
        if (filterById != null)
        {
            query += "id=" + filterById;
        }
        if (filterByIsCompleted != null)
        {
            if(!query.Equals(""))
            {
                query += "&completed=" + filterByIsCompleted.ToString().ToLower();
            }
            else
            {
                query += "completed=" + filterByIsCompleted.ToString().ToLower();
            }
        }

        if (!(query.Equals("")))
        {
            Console.WriteLine(query);
            Task<IList<Todo>> todosAsync = TodosService.GetTodosAsync("?" + query);
            todosToShow = await todosAsync;
        }
        else
        {
            Task<IList<Todo>> todosAsync = TodosService.GetTodosAsync("");
            todosToShow = await todosAsync;
        }
    }


}