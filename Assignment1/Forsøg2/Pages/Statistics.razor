@page "/Statistics"
@using Syncfusion.Blazor.Charts
@using FileData
@using Models
@inject NavigationManager NavigationManager
@inject IfileContext File




<h1>Age </h1>
<div class="row">
    <div class="col-lg-8 control-section">
        <div class="control-section">
            <SfAccumulationChart  Title="Mobile Browser Statistics" EnableAnimation="false">
            <AccumulationChartEvents Load="BeforeRender"/>
                <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
                <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
                <AccumulationChartSeriesCollection>
                    <AccumulationChartSeries DataSource="@dataSource" XName="xValue" YName="yValue" Radius="@OuterRadius" StartAngle="@StartAngle" EndAngle="@EndAngle"
                                             InnerRadius="0%" ExplodeIndex="@ExplodeIndex" Explode="true" ExplodeOffset="@ExplodeRadius">
                        <AccumulationDataLabelSettings Visible="true" Name="xValue" Position="AccumulationLabelPosition.Outside"></AccumulationDataLabelSettings>
                    </AccumulationChartSeries>
                </AccumulationChartSeriesCollection>
            </SfAccumulationChart>
        </div>
    </div>
    <div class="col-lg-4 property-section">
        <table  title="Properties" style="width: 100%">
            <tr style="height:50px"><th>Properties</th></tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>
                        Pie Angle:
                    </div>
                </td>
                <td style="width: 70%;">
                    <div>
                        <input type="range" @onchange="changeAngle" value="@value" min="0" max="360" style="width:90%" />
                    </div>
                </td>
                <td style="width: 30%">
                    <p  style="font-weight: normal;"><span>@value</span></p>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>
                        Outer Radius:
                    </div>
                </td>
                <td style="width: 50%;">
                    <div data-role="rangeslider">
                        <input type="range" @onchange="ChangeOuterRadius" value="@radiusValue" min="0" max="80" style="width:90%" />
                    </div>
                </td>
                <td style="width: 30%">
                    <p  style="font-weight: normal;"><span>@radiusValue</span></p>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>
                        Explode Radius:
                    </div>
                </td>
                <td style="width: 50%;">
                    <div data-role="rangeslider">
                        <input type="range" @onchange="ChangeExplodeRadius" value="@exploderadius" min="0" max="40" style="width:90%" />
                    </div>
                </td>
                <td style="width: 30%">
                    <p style="font-weight: normal;"><span>@exploderadius</span></p>
                </td>
            </tr>
            <tr style="height: 50px">
                <td style="width: 50%">
                    <div>
                        Explode Index:
                    </div>
                </td>
                <td style="width: 50%;">
                    <div data-role="rangeslider">
                        <input type="range" @onchange="ChangeExplodeIndex" value="@ExplodeIndex" min="0" max="6" style="width:90%" />
                    </div>
                </td>
                <td style="width: 30%">
                    <p  style="font-weight: normal;"><span>@ExplodeIndex</span></p>
                </td>
            </tr>
        </table>
    </div>
</div>
@code{

    public int StartAngle = 0, value = 0, EndAngle = 360, radiusValue = 70, exploderadius = 10;
    public double ExplodeIndex = 1;
    private IList<Adult> Adults;
    private static List<double> data;
    public string OuterRadius = "70%", ExplodeRadius = "10%";
    private void changeAngle(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        value = Convert.ToInt32(args.Value);
        StartAngle = +Convert.ToInt32(args.Value);
        EndAngle = +Convert.ToInt32(args.Value);
    }
    private void ChangeOuterRadius(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        radiusValue = Convert.ToInt32(args.Value);
        OuterRadius = args.Value + "%";
    }
    private void ChangeExplodeRadius(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        exploderadius = Convert.ToInt32(args.Value);
        ExplodeRadius = args.Value + "%";
    }
    private void ChangeExplodeIndex(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        ExplodeIndex = Convert.ToInt32(args.Value);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Adults = File.getAllAdults();
        data = FillDataSOurce();
        dataSource = new List<PieData1>
        {
            new PieData1 { xValue = "Younger than 20", yValue = data[0], r="Test"},
            new PieData1 { xValue = "20-30",    yValue = data[1], r="test2"},
            new PieData1 { xValue = "30-40",  yValue = data[2]},
            new PieData1 { xValue = "40-50", yValue = data[3]},
            new PieData1 { xValue = "50-60", yValue = data[4]},
            new PieData1 { xValue = "Older than 60", yValue = data[5]}
        };
    }
    
    public class PieData1
    {
        public string xValue { get; set; }
        public double yValue { get; set; }
        public string r { get; set; }
    }

    public List<double> FillDataSOurce()
    {
     
        int a = 0;
        int b = 0;
        int c = 0;
        int d = 0;
        int e = 0;
        int f = 0;
        for (int i = 0; i < Adults.Count; i++)
        {
            if (Adults[i].Age < 20)
                a++;
            else if (Adults[i].Age >= 20 && Adults[i].Age <= 30)
                b++;
            else if (Adults[i].Age >= 30 && Adults[i].Age <= 40)
                c++;
            else if (Adults[i].Age >= 40 && Adults[i].Age <= 50)
                d++;
            else if (Adults[i].Age >= 50 && Adults[i].Age <= 60)
                e++;
            else
                f++;
        }
        List<double> data = new List<double>
        {
            a,
            b,
            c,
            d,
            e,
            f
        };
        return data;
    }

    private List<PieData1> dataSource;


    string CurrentUri;
    void BeforeRender(IAccLoadedEventArgs Args)
    {
        
        CurrentUri = NavigationManager.Uri;
        if (CurrentUri.IndexOf("material") > -1)
        {
            Args.Theme = AccumulationTheme.Material;
        }
        else if (CurrentUri.IndexOf("fabric") > -1)
        {
            Args.Theme = AccumulationTheme.Fabric;
        }
        else if (CurrentUri.IndexOf("bootstrap") > -1)
        {
            Args.Theme = AccumulationTheme.Bootstrap;
        }
        else if (CurrentUri.IndexOf("highcontrast") > -1)
        {
            Args.Theme = AccumulationTheme.HighContrast;
        }
        else
        {
            Args.Theme = AccumulationTheme.Bootstrap4;
        }
    }
}