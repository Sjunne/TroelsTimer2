@page "/Adults"
@using Models
@using FileData
@inject IfileContext File

<h3>Adults</h3>
<p>
    Search Criteria: <input type="text" @oninput="@((arg) => ExecuteFilter(arg))" style="width:50px"/>
</p>

<div class="form-group">
        Search:<br/>
        <select rows="4" @bind="searchValue">
            <option value="">Select Search Criteria</option>
            <option value="Age">Age</option>
            <option value="FirstName">FirstName</option>
            <option value="LastName">LastName</option>
            <option value="EyeColour">EyeColour</option>
            <option value="HairColour">HairColour</option>
            <option value="Height">Height</option>
            <option value="Weight">Weight</option>
        </select>
    </div>

@if (adultsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
    
} else if (!adultsToShow.Any())
{
    <p>
        <em>No Adults exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>HairColor</th>
            <th>EyeColor</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in adultsToShow) {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Adult> adultsToShow;
    private IList<Adult> allAdults;

    private string nameFilter;
    private int minAge;

    private string searchValue = "";
    
    protected override async Task OnInitializedAsync() {
        allAdults = File.getAllAdults();
        adultsToShow = allAdults;
    }

    private void ExecuteFilter(ChangeEventArgs changeEventArgs)
    {
        nameFilter = changeEventArgs.Value.ToString();
        try
        {
            switch (searchValue)
            {
                case "FirstName":
                    adultsToShow = allAdults.Where(t =>
                        (nameFilter != null && t.FirstName.Contains(nameFilter) || string.IsNullOrEmpty(nameFilter))).ToList();
                    break;

                case "LastName":
                    adultsToShow = allAdults.Where(t =>
                        (nameFilter != null && t.LastName.Contains(nameFilter) || string.IsNullOrEmpty(nameFilter))).ToList();
                    break;

                case "Age":
                    adultsToShow = allAdults.Where(t => (nameFilter != null && t.Age == int.Parse(nameFilter) || string.IsNullOrEmpty(nameFilter))).ToList();
                    break;

                case "EyeColour":
                    adultsToShow = allAdults.Where(t =>
                        (nameFilter != null && t.EyeColor.Contains(nameFilter) || string.IsNullOrEmpty(nameFilter))).ToList();
                    break;

                case "HairColour":
                    adultsToShow = allAdults.Where(t =>
                        (nameFilter != null && t.HairColor.Contains(nameFilter) || string.IsNullOrEmpty(nameFilter))).ToList();
                    break;

                case "Height":
                    adultsToShow = allAdults.Where(t => (nameFilter != null && t.Height == int.Parse(nameFilter) || string.IsNullOrEmpty(nameFilter))).ToList();
                    break;

                case "Weight":
                    adultsToShow = allAdults.Where(t => (nameFilter != null && t.Weight == float.Parse(nameFilter) || string.IsNullOrEmpty(nameFilter))).ToList();
                    break;
            }
        }
        catch (FormatException e)
        {
            adultsToShow = allAdults;
        }




    }
    
}