@page "/Adults"
@using Models
@using FileData
@inject IfileContext File

<h3>Adults</h3>
<p>
    Filter by First Name: <input type="text" @oninput="@((arg) => FilterByName(arg))" style="width:150px"/>
</p>
<p>
    Filter by Minimum Age: <input type="number" @oninput="@((arg) => FilterByAge(arg))" style="width:70px"/>
</p>

@if (adultsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
    
} else if (!adultsToShow.Any())
{
    <p>
        <em>No Adults exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>HairColor</th>
            <th>EyeColor</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in adultsToShow) {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
            </tr>
        }
        </tbody>
    </table>
    
}

@code {
    private IList<Adult> adultsToShow;
    private IList<Adult> allAdults;

    private string nameFilter;
    private int minAge;
    
    protected override async Task OnInitializedAsync() {
        allAdults = File.getAllAdults();
        adultsToShow = allAdults;
    }
    
    private void FilterByName(ChangeEventArgs changeEventArgs) {
        nameFilter = null;
        try
        {
            nameFilter = changeEventArgs.Value.ToString();
        } catch (Exception e) { }
        ExecuteFilter();
    }
    
    private void FilterByAge(ChangeEventArgs changeEventArgs)
    {
        minAge = 0;
        try
        {
            minAge = int.Parse(changeEventArgs.Value.ToString());
        } catch (Exception e) { }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        adultsToShow = allAdults.Where(t => 
            (nameFilter != null && t.FirstName == nameFilter || nameFilter == null) && 
            (minAge != 0 && t.Age > minAge || minAge == 0)
            ).ToList();    }
}