@page "/Adults"
@using Models
@using FileData
@inject IfileContext File

<h3>Adults</h3>
<FilterComponent @ref="@filterComponent"/>
<button style="float:right" @onclick="ApplyFilter"> Apply Filter</button>


@if (adultsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
    
} else if (!adultsToShow.Any())
{
    <p>
        <em>No Adults exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>HairColor</th>
            <th>EyeColor</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in adultsToShow) {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Adult> adultsToShow;
    private IList<Adult> allAdults;

    private string nameFilter;
    private int minAge;
    private FilterComponent filterComponent;

    private string searchValue = "";
    
    protected override async Task OnInitializedAsync() {
        //allAdults = await File.getAllAdults(); Dont wanna overload
        adultsToShow = new List<Adult>();
    }

    private void ExecuteFilter(ChangeEventArgs changeEventArgs)
    {
        nameFilter = changeEventArgs.Value.ToString();
        try
        {
            switch (searchValue)
            {
                case "FirstName":
                    adultsToShow = allAdults.Where(t =>
                        (nameFilter != null && t.FirstName.Contains(nameFilter) || string.IsNullOrEmpty(nameFilter))).ToList();
                    break;

                case "LastName":
                    adultsToShow = allAdults.Where(t =>
                        (nameFilter != null && t.LastName.Contains(nameFilter) || string.IsNullOrEmpty(nameFilter))).ToList();
                    break;

                case "Age":
                    adultsToShow = allAdults.Where(t => (nameFilter != null && t.Age == int.Parse(nameFilter) || string.IsNullOrEmpty(nameFilter))).ToList();
                    break;

                case "EyeColour":
                    adultsToShow = allAdults.Where(t =>
                        (nameFilter != null && t.EyeColor.Contains(nameFilter) || string.IsNullOrEmpty(nameFilter))).ToList();
                    break;

                case "HairColour":
                    adultsToShow = allAdults.Where(t =>
                        (nameFilter != null && t.HairColor.Contains(nameFilter) || string.IsNullOrEmpty(nameFilter))).ToList();
                    break;

                case "Height":
                    adultsToShow = allAdults.Where(t => (nameFilter != null && t.Height == int.Parse(nameFilter) || string.IsNullOrEmpty(nameFilter))).ToList();
                    break;

                case "Weight":
                    adultsToShow = allAdults.Where(t => (nameFilter != null && t.Weight == float.Parse(nameFilter) || string.IsNullOrEmpty(nameFilter))).ToList();
                    break;
            }
        }
        catch (FormatException e)
        {
            adultsToShow = allAdults;
        }
    }

    private async void ApplyFilter()
    {
        string query = "";
        if (filterComponent.firstName != null)
        {
            query += "firstName=" + filterComponent.firstName;
        }
        if (filterComponent.lastName != null)
        {
            if(!query.Equals(""))
            {
                query += "&lastName=" + filterComponent.lastName;
            }
            else
            {
                query += "lastname=" + filterComponent.lastName;
            }
        }
        if (filterComponent.jobTitle != null)
        {
            if(!query.Equals(""))
            {
                query += "&jobTitle=" + filterComponent.jobTitle;
            }
            else
            {
                query += "jobTitle=" + filterComponent.jobTitle;
            }
        }
        if (filterComponent.eyeColor != null)
        {
            if(!query.Equals(""))
            {
                query += "&eyeColor=" + filterComponent.eyeColor;
            }
            else
            {
                query += "eyeColor=" + filterComponent.eyeColor;
            }
        }
        if (filterComponent.sex != null)
        {
            if(!query.Equals(""))
            {
                query += "&sex=" + filterComponent.sex;
            }
            else
            {
                query += "sex=" + filterComponent.sex;
            }
        }
        if (filterComponent.hairColor != null)
        {
            if(!query.Equals(""))
            {
                query += "&hairColor=" + filterComponent.hairColor;
            }
            else
            {
                query += "hairColor=" + filterComponent.hairColor;
            }
        }
        if (filterComponent.age != null)
        {
            if(!query.Equals(""))
            {
                query += "&age=" + filterComponent.age;
            }
            else
            {
                query += "age=" + filterComponent.age;
            }
        }
        if (filterComponent.height != null)
        {
            if(!query.Equals(""))
            {
                query += "&height=" + filterComponent.height;
            }
            else
            {
                query += "height=" + filterComponent.height;
            }
        }
        if (filterComponent.weight != null)
        {
            if(!query.Equals(""))
            {
                query += "&weight=" + filterComponent.weight;
            }
            else
            {
                query += "jobtitle=" + filterComponent.weight;
            }
        }
        if (filterComponent.id != null)
        {
            if(!query.Equals(""))
            {
                query += "&id=" + filterComponent.id;
            }
            else
            {
                query += "id=" + filterComponent.id;
            }
        }
        if (query != "")
        {
            Console.WriteLine(query);
            adultsToShow = await File.getAllAdults("?" + query);
            Console.WriteLine(adultsToShow.Count);
        }
        else
        {
            Console.WriteLine(query + "tom");
            adultsToShow = await File.getAllAdults("");
        }
        filterComponent.firstName = null;
        filterComponent.lastName = null;
        filterComponent.age = null;
        filterComponent.height = null;
        filterComponent.id = null;
        filterComponent.sex = null;
        filterComponent.eyeColor = null;
        filterComponent.weight = null;
        filterComponent.hairColor = null;
    }

}